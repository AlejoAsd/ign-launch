load(
    "//ign_bazel:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "//ign_bazel:generate_include_header.bzl",
    "generate_include_header",
)
load(
    "//ign_bazel:generate_file.bzl",
    "generate_file",
)
load(
    "//ign_bazel:generate_yaml.bzl",
    "generate_yaml",
)

load(
    "@bazelruby_rules_ruby//ruby:defs.bzl",
    "ruby_binary",
    "ruby_library",
    "ruby_test",
    "ruby_rspec",
)

package(default_visibility = ["//visibility:public"])

PROJECT_NAME = "ignition-launch"
PROJECT_MAJOR = 3
PROJECT_MINOR = 0
PROJECT_PATCH = 0
IGN_DESIGNATION = "/tmp"
CMAKE_INSTALL_PREFIX = "/tmp"
IGN_DATA_INSTALL_DIR = "/tmp"
IGN_LAUNCH_PLUGIN_INSTALL_PATH = "/tmp"
library_location = "/usr"
IGN_LIBRARY_PATH = "/usr"

# Generates config.hh based on the version numbers in CMake code.
cmake_configure_file(
    name = "config",
    src = "include/ignition/launch/config.hh.in",
    out = "include/ignition/launch/config.hh",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        "PROJECT_VERSION_MAJOR=%d" % (PROJECT_MAJOR),
        "PROJECT_MAJOR_VERSION=%d" % (PROJECT_MAJOR),
        "PROJECT_MINOR_VERSION=%d" % (PROJECT_MINOR),
        "PROJECT_PATCH_VERSION=%d" % (PROJECT_PATCH),
        "PROJECT_VERSION_PATCH=%d" % (PROJECT_PATCH),
        "PROJECT_VERSION_MAJOR=%d" % (PROJECT_MAJOR),
        "PROJECT_VERSION_MINOR=%d" % (PROJECT_MINOR),
        "PROJECT_VERSION=%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR),
        "PROJECT_VERSION_FULL=%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),  # noqa
        "PROJECT_NAME_NO_VERSION=%s" % (PROJECT_NAME),
        "PROJECT_NAME=%s" % (PROJECT_NAME),
        "PROJECT_NAME_LOWER=%s" % (PROJECT_NAME),
        "IGN_DESIGNATION=%s" % (IGN_DESIGNATION),
        "IGN_DATA_INSTALL_DIR=%s" % (IGN_DATA_INSTALL_DIR),
        "IGN_LAUNCH_PLUGIN_INSTALL_PATH=%s" % (IGN_LAUNCH_PLUGIN_INSTALL_PATH),
        "CMAKE_INSTALL_PREFIX=%s" % (CMAKE_INSTALL_PREFIX),
    ],
    visibility = ["//visibility:private"],
)

cmds = "    - launch   : Run and manage executables and plugins."

generate_yaml(
    name = "yaml",
    library_name = PROJECT_NAME, 
    library_version = "%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),
    commands = cmds,
    ruby_target = "//ign_launch:cmdlaunch.rb",
)

# Generates config.hh based on the version numbers in CMake code.
cmake_configure_file(
    name = "cmdlaunch.rb",
    src = "src/cmdlaunch.rb.in",
    out = "src/cmdlaunch.rb",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        "library_location=%s" % [library_location],
        "PROJECT_VERSION_FULL=%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),  # noqa
        "IGN_LIBRARY_PATH=%s" % (IGN_LIBRARY_PATH),
        "IGN_LIBRARY_NAME=%s" % (PROJECT_NAME),
    ],
    visibility = ["//visibility:public"],
)

ruby_binary(
    name = "launch-ruby",
    srcs = ["src/cmdlaunch.rb"],
    includes = ["src"],
    main = "src/cmdlaunch.rb",
    visibility = ["//visibility:public"],
)

generate_file(
    name = "include/ignition/launch/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_LAUNCH_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_LAUNCH_VISIBLE
#undef IGNITION_LAUNCH_VISIBLE
#endif
#define IGNITION_LAUNCH_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

public_headers_no_gen = [
    "include/ignition/launch/Plugin.hh",
]

private_headers = [
    "src/Manager.hh",
    "src/vendor/backward.hpp",
]

sources = [
    "src/ign.cc",
    "src/Manager.cc",
]

test_sources = [
    "src/ign_TEST.cc",
    "src/Manager_TEST.cc",
]

plugins = [
    "gazebo_factory",
    "gazebo_gui",
    "gazebo_server",
    "joystick",
    "joy_to_twist",
    "websocket_server",
]

generate_include_header(
    name = "launchhh_genrule",
    out = "include/ignition/launch.hh",
    hdrs = public_headers_no_gen + [
        "include/ignition/launch/config.hh",
        "include/ignition/launch/Export.hh",
    ],
)

public_headers = public_headers_no_gen + [
    "include/ignition/launch/config.hh",
    "include/ignition/launch/Export.hh",
    "include/ignition/launch.hh",
    "src/ign.hh",
]

cc_binary(
    name = "libignition-launch3.so",
    srcs = sources + private_headers + public_headers,
    includes = ["include", "src"],
    linkopts = ["-Wl,-soname,libignition-launch3.so", "-lzmq"],
    linkshared = True,
    visibility = [],
    deps = [
        "//ign_bazel:utilities",
        "//ign_msgs",
        "//ign_common",
        "//ign_plugin/loader:loader",
        "//ign_plugin/core:ign_plugin",
    ],
)

cc_library(
    name = "ign_launch",
    srcs = ["libignition-launch3.so"],
    hdrs = public_headers,
    includes = ["include", "src"],
    visibility = ["//visibility:public"],
)

[cc_library(
    name = plugin,
    srcs = glob([
        "plugins/%s/*.cc" % plugin,
        "plugins/%s/*.hh" % plugin,
    ],
    allow_empty = False,
    ),
    hdrs = glob([
        "plugins/%s/*.hh" % plugin,
    ],
    allow_empty = False,
    ),
    copts = [
        "-Iexternal/qt/QtCore",
        "-Iexternal/qt/QtGui",
        "-Iexternal/qt/QtQml",
        "-Iexternal/qt/QtQuick",
        "-Iexternal/qt/QtQuickControls2",
        "-Iexternal/qt/QtWidgets",
        "-Iexternal/qt",
    ],
    deps = [
        "//ign_launch",
        "//ign_msgs",
        "//ign_gui",
        "//ign_bazel:utilities",
        "//ign_gazebo",
        "//ign_common",
        "//ign_common/events:events",
        "//ign_transport",
        "//sdformat",
        "//ign_plugin/register:register",
        "//ign_plugin/core:ign_plugin",
        "@qt//:headers",
    ],
) for plugin in plugins]

[cc_test(
    name = src.replace("/", "_").replace(".cc", "").replace("src_", ""),
    srcs = [src] + private_headers,
    deps = [
        "//ign_launch",
        "//ign_launch/test:test_utils",
        "//ign_msgs",
        "//ign_gui",
        "//ign_bazel:utilities",
        "//ign_gazebo",
        "//ign_common",
        "//ign_common/events:events",
        "//ign_transport",
        "//sdformat",
        "//ign_plugin/register:register",
        "//ign_plugin/core:ign_plugin",
        "@gtest//:gtest",
        "@gtest//:gtest_main",
    ],
) for src in test_sources]
